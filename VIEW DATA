import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

class DataStorage {
    private Map<String, String> customerData = new HashMap<>();
    private Map<String, String> salesRecords = new HashMap<>();
    private Map<String, Map<String, String>> vehicleData = new HashMap<>();
    private Map<String, String> employeeData = new HashMap<>();

    public void addCustomerData(String customerId, String data) {
        customerData.put(customerId, data);
    }

    public void addSalesRecord(String salesId, String data) {
        salesRecords.put(salesId, data);
    }

    public void addVehicleData(String vehicleId, Map<String, String> data) {
        vehicleData.put(vehicleId, data);
    }

    public void addEmployeeData(String employeeId, String data) {
        employeeData.put(employeeId, data);
    }

    public String getOwnCustomerData(String employeeId) {
        return customerData.getOrDefault(employeeId, "Access Denied");
    }

    public String getOwnSalesRecords(String employeeId) {
        return salesRecords.getOrDefault(employeeId, "Access Denied");
    }

    public Map<String, Map<String, String>> getAllVehicleData() {
        return vehicleData;
    }

    public Map<String, String> getAllCustomerData() {
        return customerData;
    }

    public Map<String, String> getAllSalesRecords() {
        return salesRecords;
    }

    public Map<String, String> getAllEmployeeData() {
        return employeeData;
    }

    // Add a method to print data in tabular form
    public void printDataInTabularForm(Map<String, String> data) {
        System.out.println("+------------------+----------------------+");
        System.out.println("|     ID           |     Data             |");
        System.out.println("+------------------+----------------------+");

        for (Map.Entry<String, String> entry : data.entrySet()) {
            String id = entry.getKey();
            String dataValue = entry.getValue();
            System.out.printf("| %-16s | %-20s |\n", id, dataValue);
        }

        System.out.println("+------------------+----------------------+");
    }

}

class Employee {
    private String employeeId;
    private String accessLevel;

    public Employee(String employeeId, String accessLevel) {
        this.employeeId = employeeId;
        this.accessLevel = accessLevel;
    }

    public void viewData(DataStorage dataStorage) {
        if ("Sales".equals(accessLevel)) {
            Map<String, String> ownCustomerData = new HashMap<>();
            ownCustomerData.put(employeeId, dataStorage.getOwnCustomerData(employeeId));
            ownCustomerData.put(employeeId, dataStorage.getOwnSalesRecords(employeeId));

            System.out.println("Sales Employee " + employeeId + " can view:");
            dataStorage.printDataInTabularForm(ownCustomerData);
        } else if ("Management".equals(accessLevel)) {
            Map<String, String> allCustomerData = dataStorage.getAllCustomerData();
            Map<String, String> allSalesRecords = dataStorage.getAllSalesRecords();
            Map<String, Map<String, String>> allVehicleData = dataStorage.getAllVehicleData();
            Map<String, String> allEmployeeData = dataStorage.getAllEmployeeData();

            System.out.println("Management Employee " + employeeId + " can view:");
            dataStorage.printDataInTabularForm(allCustomerData);
            dataStorage.printDataInTabularForm(allSalesRecords);
            dataStorage.printDataInTabularForm(allEmployeeData);

            // Print vehicle data in tabular form
            System.out.println("Vehicle Data:");
            for (Map.Entry<String, Map<String, String>> entry : allVehicleData.entrySet()) {
                String id = entry.getKey();
                Map<String, String> vehicleData = entry.getValue();
                dataStorage.printDataInTabularForm(vehicleData);
            }
        }
    }

}

public class Main {
    public static void main(String[] args) {
        DataStorage dataStorage = new DataStorage();

        // Read data from CSV files and populate data storage
        readDataFromCSV("cust.csv", dataStorage, "Customer");
        readDataFromCSV("sales.csv", dataStorage, "Sales");
        readDataFromCSV("vehicle.csv", dataStorage, "Vehicle");
        readDataFromCSV("employee.csv", dataStorage, "Employee");

        // Create employee instances with different access levels
        Employee salesEmployee = new Employee("employee1", "Sales");
        Employee managementEmployee = new Employee("employee2", "Management");

        // View data based on access level
        salesEmployee.viewData(dataStorage);
        System.out.println();
        managementEmployee.viewData(dataStorage);
    }

    private static void readDataFromCSV(String fileName, DataStorage dataStorage, String dataType) {
        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length >= 2) {
                    String id = parts[0];
                    String data = parts[1];
                    switch (dataType) {
                        case "Customer":
                            dataStorage.addCustomerData(id, data);
                            break;
                        case "Sales":
                            dataStorage.addSalesRecord(id, data);
                            break;
                        case "Vehicle":
                            Map<String, String> vehicleData = new HashMap<>();
                            vehicleData.put("data", data);
                            // Check if carStatus is '1' (in stock) and set salesPrice to null
                            if (parts.length >= 5 && "1".equals(parts[3])) {
                                vehicleData.put("salesPrice", null);
                            }
                            dataStorage.addVehicleData(id, vehicleData);
                            break;
                        case "Employee":
                            // Check if employeeStatus is '1' (under Management) and assign access level
                            if (parts.length >= 3 && "1".equals(parts[2])) {
                                dataStorage.addEmployeeData(id, data + ",Management");
                            } else {
                                dataStorage.addEmployeeData(id, data);
                            }
                            break;
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

